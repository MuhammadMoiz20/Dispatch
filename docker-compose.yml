services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: dispatch
      POSTGRES_PASSWORD: dispatch
      POSTGRES_DB: dispatch
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dispatch']
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redisdata:/data

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'check_port_connectivity']
      interval: 10s
      timeout: 5s
      retries: 5

  users:
    build:
      context: .
      dockerfile: services/users/Dockerfile
    environment:
      - PORT=4001
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch?schema=users
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '14001:4001'
    command: sh -c "pnpm -C services/users exec prisma migrate deploy; pnpm -C services/users exec prisma db push; node services/users/dist/services/users/src/main.js"

  orders:
    build:
      context: .
      dockerfile: services/orders/Dockerfile
    environment:
      - PORT=4002
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch?schema=orders
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - REDIS_URL=redis://redis:6379
      - RULES_URL=http://rules:4004
      - LABELS_BUCKET=dispatch-labels
      - S3_ENDPOINT=http://minio:9000
      - S3_PUBLIC_URL=http://localhost:9000
      - S3_REGION=us-east-1
      - S3_ACCESS_KEY_ID=minio
      - S3_SECRET_ACCESS_KEY=minio123
      - S3_FORCE_PATH_STYLE=true
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_started
    ports:
      - '14002:4002'
    command: sh -c "pnpm -C services/orders exec prisma migrate deploy || pnpm -C services/orders exec prisma db push; node services/orders/dist/main.js"

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    environment:
      - PORT=3000
      - USERS_URL=http://users:4001
      - ORDERS_URL=http://orders:4002
      - WEBHOOKS_URL=http://webhooks:4003
      - NOTIFICATIONS_URL=http://notifications:4006
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    depends_on:
      users:
        condition: service_started
      orders:
        condition: service_started
      notifications:
        condition: service_started
    ports:
      - '3000:3000'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s -X POST http://localhost:3000/graphql -H 'Content-Type: application/json' -d '{\"query\":\"{ health }\"}' | grep -q \"\\\"ok\\\"\"",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  webhooks:
    build:
      context: .
      dockerfile: services/webhooks/Dockerfile
    environment:
      - PORT=4003
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch?schema=webhooks
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - '14003:4003'
    # Ensure schema exists when there are no migrations: run db push in that case
    command: sh -c "if [ -d services/webhooks/prisma/migrations ] && [ \"$(ls -A services/webhooks/prisma/migrations 2>/dev/null)\" ]; then pnpm -C services/webhooks exec prisma migrate deploy; else pnpm -C services/webhooks exec prisma db push; fi; node services/webhooks/dist/main.js"
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:4003/health']
      interval: 5s
      timeout: 3s
      retries: 5

  rules:
    build:
      context: .
      dockerfile: services/rules/Dockerfile
    environment:
      - PORT=4004
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch?schema=rules
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - ORDERS_URL=http://orders:4002
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - '14004:4004'
    command: sh -c "pnpm -C services/rules exec prisma migrate deploy || pnpm -C services/rules exec prisma db push; node services/rules/dist/main.js"
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:4004/health']
      interval: 5s
      timeout: 3s
      retries: 5

  shopify:
    build:
      context: .
      dockerfile: services/shopify/Dockerfile
    environment:
      - PORT=4005
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch?schema=shopify
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - ORDERS_URL=http://orders:4002
      - SHOPIFY_APP_URL=http://localhost:14005
      - SHOPIFY_API_KEY=your_api_key_here
      - SHOPIFY_API_SECRET=your_api_secret_here
      - SHOPIFY_SCOPES=read_orders
      - SHOPIFY_API_VERSION=2024-07
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '14005:4005'
    command: sh -c "pnpm -C services/shopify exec prisma migrate deploy || pnpm -C services/shopify exec prisma db push; node services/shopify/dist/main.js"
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:4005/health']
      interval: 5s
      timeout: 3s
      retries: 5

  notifications:
    build:
      context: .
      dockerfile: services/notifications/Dockerfile
    environment:
      - PORT=4006
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch?schema=notifications
      - JWT_SECRET=dev-secret
      - NODE_ENV=development
      - EMAIL_PROVIDER=noop
      - EMAIL_FROM=no-reply@dispatch.local
      - POSTMARK_TOKEN=
      - SENDGRID_API_KEY=
      - TWILIO_ACCOUNT_SID=
      - TWILIO_AUTH_TOKEN=
      - TWILIO_FROM_NUMBER=
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '14006:4006'
    command: sh -c "pnpm -C services/notifications exec prisma migrate deploy || pnpm -C services/notifications exec prisma db push; node services/notifications/dist/main.js"

  # Analytics database for slice 14
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    environment:
      CLICKHOUSE_DB: analytics
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: '1'
    ports:
      - '8123:8123' # HTTP
    volumes:
      - chdata:/var/lib/clickhouse

  # One-off init to apply schema (runs client against ClickHouse)
  clickhouse-init:
    image: clickhouse/clickhouse-server:23.8
    depends_on:
      - clickhouse
    volumes:
      - ./docs/slices/14-analytics/contracts/clickhouse.sql:/schema/clickhouse.sql:ro
    entrypoint: ['/bin/sh', '-lc']
    command: |
      "until clickhouse-client --host clickhouse -q 'SELECT 1'; do echo waiting for clickhouse; sleep 1; done; \
       clickhouse-client --host clickhouse -n < /schema/clickhouse.sql; echo 'analytics schema applied'"

  analytics:
    build:
      context: .
      dockerfile: services/analytics/Dockerfile
    environment:
      - PORT=4007
      - NODE_ENV=development
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
      - DATABASE_URL=postgresql://dispatch:dispatch@postgres:5432/dispatch
      - ETL_SPOOL_DIR=/var/spool/analytics
    depends_on:
      rabbitmq:
        condition: service_healthy
      clickhouse:
        condition: service_started
      clickhouse-init:
        condition: service_completed_successfully
    ports:
      - '14007:4007'
    command: sh -c "node services/analytics/dist/main.js"
    volumes:
      - analytics_spool:/var/spool/analytics

  merchant-dashboard:
    build:
      context: .
      dockerfile: apps/merchant-dashboard/Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3000/graphql
    depends_on:
      api-gateway:
        condition: service_started
    ports:
      - '3001:3001'

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - miniodata:/data

volumes:
  pgdata: {}
  redisdata: {}
  miniodata: {}
  chdata: {}
  analytics_spool: {}
