generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id         String      @id @default(uuid())
  tenantId   String
  channel    String
  externalId String
  status     String      @default("created")
  createdAt  DateTime    @default(now())
  items      OrderItem[]
  returns    Return[]
  payments   Payment[]

  @@unique([tenantId, channel, externalId])
  @@index([tenantId])
  @@index([tenantId, createdAt])
  @@index([tenantId, status])
  @@index([tenantId, channel])
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  sku      String
  quantity Int

  order Order @relation(fields: [orderId], references: [id])
}

model Return {
  id        String   @id @default(uuid())
  orderId   String
  tenantId  String
  reason    String
  state     String   @default("initiated")
  createdAt DateTime @default(now())

  order   Order    @relation(fields: [orderId], references: [id])
  refunds Refund[]

  @@index([tenantId])
}

model Label {
  id        String   @id @default(uuid())
  tenantId  String
  returnId  String   @unique
  carrier   String
  service   String
  costCents Int
  currency  String
  objectKey String
  createdAt DateTime @default(now())

  @@index([tenantId])
}

// Payment captured for an order (to enable refunds)
model Payment {
  id          String   @id @default(uuid())
  tenantId    String
  orderId     String
  provider    String // e.g., stripe, shopify_payments
  chargeId    String // provider-specific payment/charge id
  amountCents Int
  currency    String
  createdAt   DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])

  @@unique([tenantId, provider, chargeId])
  @@index([tenantId])
}

// Refund requests against a return/payment
model Refund {
  id               String   @id @default(uuid())
  tenantId         String
  returnId         String
  paymentId        String?
  provider         String // e.g., stripe, shopify_payments
  externalRefundId String? // provider refund id
  amountCents      Int
  currency         String
  status           String   @default("pending") // pending|succeeded|failed
  reason           String?
  error            String?
  idempotencyKey   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  return Return @relation(fields: [returnId], references: [id])

  @@index([tenantId])
  @@index([tenantId, status])
  @@index([returnId])
}

// Merchant carrier credentials (store tokens securely in production)
model CarrierCredential {
  id        String   @id @default(uuid())
  tenantId  String
  provider  String // easypost|shippo|mock
  apiKey    String // NOTE: plaintext in dev; use KMS/vault in prod
  createdAt DateTime @default(now())

  @@index([tenantId, provider])
}

model Outbox {
  id          String    @id @default(uuid())
  tenantId    String?
  type        String
  payload     Json
  status      String    @default("pending") // pending|published|failed
  attempts    Int       @default(0)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([status, createdAt])
}

model ScanAudit {
  id        String   @id @default(uuid())
  tenantId  String
  returnId  String
  userId    String?
  deviceId  String?
  event     String
  createdAt DateTime @default(now())

  @@index([tenantId, createdAt])
  @@index([returnId])
}
