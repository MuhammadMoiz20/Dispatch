generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  users     User[]
}

model User {
  id        String   @id @default(uuid())
  tenantId  String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id])
  authCredential AuthCredential?
  devices Device[] @relation("UserDevices")
  apiKeys ApiKey[]
  auditLogs AuditLog[] @relation("UserAuditLogs")
  @@index([tenantId])
}

model AuthCredential {
  id            String   @id @default(uuid())
  userId        String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Device {
  id         String   @id @default(uuid())
  userId     String
  deviceName String
  token      String   @unique
  createdAt  DateTime @default(now())
  lastSeenAt DateTime?

  user User @relation("UserDevices", fields: [userId], references: [id])

  @@index([userId])
}

model ApiKey {
  id         String   @id @default(uuid())
  tenantId   String
  name       String
  keyPrefix  String   @unique
  keyHash    String
  createdAt  DateTime @default(now())
  lastUsedAt DateTime?
  createdBy  String

  user User @relation(fields: [createdBy], references: [id])

  @@index([tenantId])
}

model AuditLog {
  id         String   @id @default(uuid())
  tenantId   String
  userId     String?
  apiKeyId   String?
  action     String
  resource   String
  resourceId String?
  ip         String?
  metadata   Json?
  createdAt  DateTime @default(now())

  user User? @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([tenantId])
}
